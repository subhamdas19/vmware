
https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/
class GFG
{
	public Node SortedMerge(Node A, Node B)
	{
	
		if(A == null) return B;
		if(B == null) return A;
		
		if(A.data < B.data)
		{
			A.next = SortedMerge(A.next, B);
			return A;
		}
		else
		{
			B.next = SortedMerge(A, B.next);
			return B;
		}
		
	}
}

// This code is contributed by Tuhin Das


Method 4 (Reversing The Lists)

This idea involves first reversing both the given lists and after reversing, traversing both the lists till the end and then comparing the nodes of both the lists and inserting the node with a larger value at the beginning of the result list. And in this way we will get the resulting list in increasing order.

1) Initialize result list as empty: head = NULL.
2) Let 'a' and 'b' be the heads of first and second list respectively.
3) Reverse both the lists.
4) While (a != NULL and b != NULL)
    a) Find the larger of two (Current 'a' and 'b')
    b) Insert the larger value of node at the front of result list.
    c) Move ahead in the list of larger node. 
5) If 'b' becomes NULL before 'a', insert all nodes of 'a' 
   into result list at the beginning.
6) If 'a' becomes NULL before 'b', insert all nodes of 'b' 
   into result list at the beginning.  

Below is the implementation of above solution.

/*Given two sorted linked lists consisting of N and M nodes
respectively. The task is to merge both of the list
(in-place) and return head of the merged list.*/
#include <iostream>
using namespace std;
 
/* Link list Node */
struct Node {
    int key;
    struct Node* next;
};
 
// Function to reverse a given Linked List using Recursion
Node* reverseList(Node* head)
{
 
    if (head->next == NULL)
        return head;
 
    Node* rest = reverseList(head->next);
    head->next->next = head;
    head->next = NULL;
 
    return rest;
}
 
// Given two non-empty linked lists 'a' and 'b'
Node* sortedMerge(Node* a, Node* b)
{
   
    // Reverse Linked List 'a'
    a = reverseList(a);
 
    // Reverse Linked List 'b'
    b = reverseList(b);
 
    // Initialize head of resultant list
    Node* head = NULL;
 
    Node* temp;
 
    // Traverse both lists while both of them
    // have nodes.
    while (a != NULL && b != NULL) {
 
        // If a's current value is greater than or equal to
        // b's current value.
        if (a->key >= b->key) {
 
            // Store next of current Node in first list
            temp = a->next;
           
            // Add 'a' at the front of resultant list
            a->next = head;
           
            // Make 'a' - head of the result list
            head = a;
           
            // Move ahead in first list
            a = temp;
        }
       
        // If b's value is greater. Below steps are similar
        // to above (Only 'a' is replaced with 'b')
        else {
 
            temp = b->next;
            b->next = head;
            head = b;
            b = temp;
        }
    }
 
    // If second list reached end, but first list has
    // nodes. Add remaining nodes of first list at the
    // beginning of result list
    while (a != NULL) {
 
        temp = a->next;
        a->next = head;
        head = a;
        a = temp;
    }
 
    // If first list reached end, but second list has
    // nodes. Add remaining nodes of second list at the
    // beginning of result list
    while (b != NULL) {
 
        temp = b->next;
        b->next = head;
        head = b;
        b = temp;
    }
 
    // Return the head of the result list
    return head;
}
 
/* Function to print Nodes in a given linked list */
void printList(struct Node* Node)
{
    while (Node != NULL) {
        cout << Node->key << " ";
        Node = Node->next;
    }
}
 
/* Utility function to create a new node with
   given key */
Node* newNode(int key)
{
    Node* temp = new Node;
    temp->key = key;
    temp->next = NULL;
    return temp;
}
 
/* Driver program to test above functions*/
int main()
{
    /* Start with the empty list */
    struct Node* res = NULL;
 
    /* Let us create two sorted linked lists to test
       the above functions. Created lists shall be
         a: 5->10->15->40
         b: 2->3->20  */
    Node* a = newNode(5);
    a->next = newNode(10);
    a->next->next = newNode(15);
    a->next->next->next = newNode(40);
 
    Node* b = newNode(2);
    b->next = newNode(3);
    b->next->next = newNode(20);
 
    cout << "List A before merge: \n";
    printList(a);
 
    cout << "\nList B before merge: \n";
    printList(b);
 
    /* merge 2 sorted Linked Lists */
    res = sortedMerge(a, b);
 
    cout << "\nMerged Linked List is: \n";
    printList(res);
 
    return 0;
}

Output:

List A before merge: 
5 10 15 40 
List B before merge: 
2 3 20 
Merged Linked List is: 
2 3 5 10 15 20 40 

Time Complexity:  Since we are traversing through the two lists fully. So, the time complexity is O(m+n) where m and n are the lengths of the two lists to be merged. 
